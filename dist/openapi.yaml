---
openapi: 3.0.0
info:
  title: Recipes API
  description: This is an API for a recipes website
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/ChenMordehai/API/1.0.0
  description: SwaggerHub API Auto Mocking
tags:
- name: user
  description: user's info
- name: recipe
  description: recipe√© info
paths:
  /register:
    post:
      tags:
      - user
      summary: A new user from the client is added to the server
      description: A JSON object that contains all the details about the new user.
      operationId: registerUser
      requestBody:
        description: Inventory item to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "201":
          description: New User was added to system
        "400":
          description: wrong input parameters
        "409":
          description: User already exists in the system
  /login:
    post:
      tags:
      - user
      summary: A known user wants to login to his account.
      description: A JSON object that contains the user's username and password.
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/loginForm'
        required: true
      responses:
        "200":
          description: User logged-in successfully
        "401":
          description: wrong username or password
  /recipes/searchRecipe/{queryToSearch}:
    get:
      tags:
      - searchRecipe
      summary: User wants to search for a recipe
      description: A JSON object that contains the user's query(needed), number of wanted results(optional) and costumize filter(optional).
      operationId: searchRecipeInSystem
      parameters:
      - name: queryToSearch
        in: path
        description: user's query to search(recipe's name/ wanted food).
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: pancakes
      - name: numOfResults
        in: query
        description: number of results the user want to get. optional parameter, default is 5, values can be 5/10/15.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          example: 10
          default: 5
          enum:
          - 5
          - 10
          - 15
      - name: filterBy
        in: query
        description: filter criterion the user want to filter by. optional parameter, default is no filtering, values can be cuisine, diet, intolerance.
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/searchFilter'
      responses:
        "200":
          description: success in returning search results.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/recipePreviewInfo'
        "204":
          description: No relevant results.
  /recipes:
    get:
      tags:
      - previewRecipe
      summary: Returns a list of recipes' preview
      description: "The main page that displays selection of recipes preview.\nThe preview includes: \nname/title,\npicture,\nhow long does the making takes,\nthe recipe's popularity (likes),\nis vegan/vegetarian,\nwith/without gluten,\ndid the user watch the recipe already,\ndid the user save the recipe to his favorite.\n"
      operationId: showRecipesPreview
      responses:
        "200":
          description: the previews of the selection of recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/recipePreviewInfo'
  /recipes/{recipeId}:
    get:
      tags:
      - recipePage
      summary: Returns specific recipe's data
      description: |
        Return the data about the wanted recipe:
        all the details described in the general recipes page
        Ingredients list with quantities
        instructions
        serving size
      operationId: showRecipeData
      parameters:
      - name: recipeId
        in: path
        description: the wanted recipe's id
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/recipes'
      responses:
        "200":
          description: the wanted recipe's data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recipeFullInfo'
        "400":
          description: invalid recipe id
  /about:
    get:
      tags:
      - about
      summary: Returns the about page
      description: Information about the programming team
      operationId: aboutPage
      responses:
        "200":
          description: the about information
          content:
            application/json:
              schema:
                type: string
  /personal/favorites:
    get:
      tags:
      - personal
      summary: returns all user's favorite recipes
      description: favoite recipes of current logged in user
      responses:
        "200":
          description: user's favorite recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/recipePreviewInfo'
        "204":
          description: no favorite recipes for current user
  /personal/private:
    get:
      tags:
      - personal
      summary: returns all user's recipes that he created
      description: recipes that current logged in user created
      responses:
        "200":
          description: user's personal recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/recipePreviewInfo'
        "204":
          description: no private recipes for current user
  /personal/laFamilia:
    get:
      tags:
      - personal
      summary: returns all user's family recipes(at least 3)
      description: family recipes of current logged in user
      responses:
        "200":
          description: user's family recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/userFamilyRecipes'
        "204":
          description: no family recipes for current user
  /addNewRecipe:
    post:
      tags:
      - user
      summary: A new user adds new recipe
      description: A JSON object that contains all the details about the new recipe.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/recipeFullInfo'
        required: true
      responses:
        "201":
          description: New Recipe was added to system
        "400":
          description: wrong input parameters
        "409":
          description: Recipe already exists in the system
components:
  schemas:
    User:
      required:
      - country
      - email
      - firstname
      - lastname
      - password
      - passwordconfirmation
      - username
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username contains between 3 to 8 letters(only)
          example: chenush
        firstname:
          type: string
          description: user's' first name
          example: Dani
        lastname:
          type: string
          description: user's' last name
          example: Cohen
        country:
          type: string
          description: user's' country
          example: Spain
        password:
          maxLength: 10
          minLength: 5
          type: string
          description: user's' password. contains between 5 to 10 chars, at least 1 number and 1 special char.
          format: password
          example: lala99@
        passwordconfirmation:
          maxLength: 10
          minLength: 5
          type: string
          description: user's' password. needs to match the user's password.
          format: password
          example: lala99@
        email:
          type: string
          description: user's' email
          format: email
          example: chenush@gmail.com
      description: Model containing user info
    loginForm:
      required:
      - password
      - username
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username contains between 3 to 8 letters(only)
          example: chenush
        password:
          maxLength: 10
          minLength: 5
          type: string
          description: user's' password. contains between 5 to 10 chars, at least 1 number and 1 special char.
          format: password
          example: lala99@
      description: login user's info
    searchFilter:
      type: object
      properties:
        cuisine:
          type: string
          description: parameter can be fed with any of these cuisines 'https://spoonacular.com/food-api/docs#Cuisines'
          example: Chinese
        diet:
          type: string
          description: parameter can be fed with any of these diets 'https://spoonacular.com/food-api/docs#Diets'
          example: Ketogenic
        intolerance:
          type: string
          description: parameter can be fed with any of these intolerances 'https://spoonacular.com/food-api/docs#Intolerances'
          example: Peanut
      description: filter options in searching, default is non filter.
    recipes:
      type: object
      properties:
        id:
          type: integer
          format: int64
    recipePreviewInfo:
      type: object
      properties:
        recipeInfo:
          $ref: '#/components/schemas/recipeinfo'
        recipeHistoryByUser:
          $ref: '#/components/schemas/recipehistoryByUser'
      description: preview of the recipe's information.
    recipeinfo:
      type: object
      properties:
        id:
          type: integer
          description: recipe's id (unique)
          example: 155
        image:
          type: string
          description: The url to the recipe's picture
          example: https://img.mako.co.il/2018/05/07/IMG_2700_i.jpg
        name:
          type: string
          description: recipe's name/title
          example: vanilla panckes
        preparationTime:
          type: integer
          description: time (in minutes) it takes to make the recipe
          example: 15
        totalLikes:
          type: integer
          description: number of likes the recipe got
          example: 555
        isVegetarian:
          type: boolean
          description: true if recipe is vegetarian, else false.
          example: false
        isVegan:
          type: boolean
          description: true if recipe is vegetarian, else false.
          example: false
        isGlutenFree:
          type: boolean
          description: true if recipe is vegetarian, else false.
          example: true
      description: recipe's personal information.
    recipehistoryByUser:
      type: object
      properties:
        wasWatched:
          type: boolean
          description: true if user watched the recipe in the past, else false.
          example: true
        isFavorite:
          type: boolean
          description: true if recipe is in the user's favorite recipes, else false.
          example: true
      description: user's history with a spesific recipe.
    recipeIngredients:
      type: object
      properties:
        ingredient:
          type: string
          description: name of the ingredient
          example: oil
        amount:
          type: integer
          description: quantity
          example: 2
        measureUnit:
          type: string
          description: how to measure ingredient's amount
          example: cups
      description: ingredient's info
    recipeInstructions:
      type: object
      properties:
        stepNum:
          type: integer
          description: numbet of step
          example: 1
        stepContent:
          type: string
          description: what to do in current step
          example: Turn the oven to 180 degrees
      description: step in recipe's instructions
    userFamilyRecipes:
      type: object
      properties:
        name:
          type: string
          description: recipe's name
          example: tomato soup
        origin:
          type: string
          description: person who owns/created the recipe
          example: Mother Lili
        occasion:
          type: string
          description: for which event the recipe is suitable
          example: passover
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/recipeIngredients'
        instructions:
          type: array
          items:
            $ref: '#/components/schemas/recipeInstructions'
        image:
          type: string
          description: The url to the recipe's picture
          example: https://img.mako.co.il/2018/05/07/IMG_2700_i.jpg
      description: user's family recipe
    recipeFullInfo:
      type: object
      properties:
        recipeInfo:
          $ref: '#/components/schemas/recipePreviewInfo'
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/recipeIngredients'
        instructions:
          type: array
          items:
            $ref: '#/components/schemas/recipeInstructions'
        servingSize:
          type: integer
      description: recipe's full info
